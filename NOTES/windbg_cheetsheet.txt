~~~~~~~~~~ WINDBG (Everything we input is treated as Hexadecimal by default)

# windbg -QY sample.exe args 		# Tells windgb to save the layout while creating

> g 		# run
> gu		# step-out of function

> bp basic_vuln!main    # set a breakpoint for main() in basic_vuln process.
> bu basic_vuln!main	# set a breakpoint that exists even after restarting the process
> bl					# list the breakpoints
> bc 2					# delete breakpoint indexed at 2
> bc *					# delete all breakpoints

> a						# assemble x86 instructions
jmp esp

> !address				# displays address space of currently running process.
> !address 0x13000		# displays the properties of the address 0x13000
> !teb					# displays info. about 'Thread Exection Block'
> !exchain				# lists the currently registered exception handlers

> .load narly			# plugin module that identifies tables for SAFE SEH mitigations on dlls
> !nmod					# different mitigations on all loaded modules

> .load msec			# Loads probably microsoft security module
> !exploitable			# Checks if the crash is exploitable or not based on some heuristics

> .restart				# Restart the program
> .reload				# Reload the program
> .sympath				# Shows the symbol search path
> .symfix				# Use this command after changing the 'symbol path' to get changes done.

> ?					# To do arbitrary calculations on command line. masm evaluation
> ?esp+100			# gives the value of $esp+0x100
> ?esp+eax			# gives the value of $esp+$eax
> ?? <expression>	# C++ evaluation

# Command to read from memory
> da address	# x/s address : Reads an ASCII string from address			
> du address	# Reads a unicode string from adddress		
> dc address	# x/c address : Reads bytes and show the ASCII chars corresponding to bytes
> dd esp		# x/xw $esp
> dd ebp L2		# x/2w $ebp. Describe Dword starting at ebp. L2 is counts of Dword
> dd poi(esp)	# Poi command interpret args as pointers and tries to dereference the argument. It 
				# will look at top value on stack and interpret as a pointer

> k				# display stack backtrace info
> p				# ni -> step over
> t				# si -> step into

> x basic_vuln!prize		# Print the location of 'prize()' symbol in 'basic_vuln' module. (
> ln 0x10056				# Prints the nearest symbol pertaining to the address 0x10056
> poi(0x80104839)			# returns *0x80104839

> u address					# disassemble address
> u poi(ebp+0x4)			# disassemble $ebp+0x4
> ub address				# Unassemble backwards

> dg fs						# Display segment info. selected by fs register
> dt nt!_peb				# Display structure info on the peb structure defined in nt module


> lmvm binary_name			# Gives information about the binary
> lm						# list modules
> !lmi module_name			# info about a module
> s ntdll Lb2000 ff e4		# find "ff e4" instruction in ntdll, size is b2000