

NOTE :	Include -pthread (or -lthread) as compiler option to tell the compiler we need threading
		support. Include <pthread.>


clone					# Creates a child process in a manner similar to fork().
pthread_create			# Create a process thread
pthread_join			# [+] Wait for your thread to finish and then return and continue executing main.
pthread_cancel			# Sends a cancellation request to the thread
pthread_exit			# Terminates the calling thread, i.e. the thread never returns after calling it.
						# After executing child thread, it exits the process too. Creates thread zombies
pthread_yield			# Causes the calling thread to free the CPU.


##	LOCK OR MUTEX (MUTual EXclusion)
=>	If you lock a mutex, it does'nt stop all other threads. Its only when a thread attempts to lock a 
	mutex that is already locked, will the thread have to wait.

pthread_mutex_lock		# Place this function at the start of critical section to lock a shared resource
pthread_mutex_unlock	# Place this function at the end of critical section to unlock a shared resource 
pthread_mutex_destroy	# To destroy an mutex. NOTE: you can only destroy an unlocked mutex.
pthread_mutex_init		# To create a mutex


##	SEMAPHORES

sem_init				# Initializes an unnamed semaphore
sem_wait				# waits if count is 0 and decrement count by one and returns if count != 0
sem_post				# Anounce that we've finished



##	MACROS

PTHREAD_MUTEX_INITIALIZER	# Similar to pthread_mutex_init() 


