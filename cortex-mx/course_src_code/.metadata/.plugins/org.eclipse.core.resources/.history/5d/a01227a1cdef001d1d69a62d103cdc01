/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

void addition()
{
	//__asm volatile ("mov r1, #0x20001000");
	//__asm volatile ("mov r2, #0x20001004");
	__asm volatile ("ldr r1, =#0x20001000");	// immediate values can be loaded into registers this way
	__asm volatile ("ldr r2, =#0x20001004");	// ldr r2, [pc, #20]   ; (0x8000204 located after disassembly of addition())
	__asm volatile ("ldr r0, [r1]");
	__asm volatile ("ldr r1, [r2]");
	__asm volatile ("add r0, r0, r1");
	__asm volatile ("str r0, [r2]");
}

/*
each input/output operands in an inline-assembly statement
are described by a "constraint string" followed by C expression
"<constraint_string>" (<C_expression>)
constraint_string = constraint character + constraint modifier
*/

int main(void)
{
	addition();
    /* Loop forever */
	for(;;);
}
